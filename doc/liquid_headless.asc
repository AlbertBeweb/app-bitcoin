Liquid headless application
============================
Ledger Firmware Team <hello@ledger.fr>
Application version 1.4.0

== 1.4.0

  - Initial version

== About

The Liquid headless application is a modification of the Liquid application, allowing to replace the user validation by a cryptographic authorization computed offline. 

== Deployment

The Liquid headless application is available as source and signed binary.

It shall only be deployed in a firmware implementing the sealed Custom CA feature in order to prevent a rogue employee from installing the generic Liquid application - only applications sent over a Secure Channel owned by the local administrator can be installed, until the device is reset.

== Authorization scheme 

=== Creating an authorization keypair

The authorization keypair is created over secp256k1.

=== Computing the authorization

The authorization for an unsigned transaction is the secp256k1 signature by the authorization private key of the following SHA-256 data serialized natively

  * Tranasction version
  * Number of transaction inputs
  * For each transaction input
      - Input prevout
      - Input sequence
  * Number of transaction outputs
  * For each transaction output
      - Output asset
      - Output value
      - Output scriptPubKey length
      - Output scriptPubKey


=== Commiting to the authorization key

The authorization key is sent to the application using the HEADLESS LIQUID SEND AUTHORIZATION PUBLIC KEY described below

=== Sending the authorization

The application signature flow is unchanged.

When receiving the UNTRUSTED HASH TRANSACTION INPUT FINALIZE FULL APDU, no user prompt is displayed

The UNTRUSTED HASH SIGN APDU is modified as described below to add the authorization. 

== Additional APDUs

== HEADLESS LIQUID SEND AUTHORIZATION PUBLIC KEY

==== Description

This command is send the authorization public key used to verify transaction authorizations

It can only be sent once - the Liquid headless application needs to be uninstalled to change the it.

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*        | *P2*       | *Lc*     | *Le*   
|   D0  |   02   |   00

        |   00       |  65     |   var
|==============================================================================================================================


'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                      | *Length*
| Uncompressed authorization key                                                     | 65
|==============================================================================================================================

'Output data'

None

== Modified APDUs

=== UNTRUSTED HASH SIGN

==== Description

This command is used to sign a given secure hash using a private key (after re-hashing it following the standard Bitcoin signing process) to finalize a transaction input signing process.

This command will be rejected if the transaction signing state is not consistent, if no authorization public key has been set or if the authorization is not correct

==== Coding

'Command'

[width="80%"]
|==============================================================================================================================
| *CLA* | *INS*  | *P1*        | *P2*       | *Lc*     | *Le*   
|   E0  |   48   |   00        |   00       |  var     |   var
|==============================================================================================================================


'Input data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                      | *Length*
| Number of BIP 32 derivations to perform (max 10)                                   | 1
| First derivation index for the private key to use (big endian)                     | 4
| ...                                                                                | 4
| Last derivation index for the private key to use (big endian)                      | 4
| Authorization length                                                               | 1
| Authorization                                                                      | var
| Lock Time (big endian)                                                             | 4
| SigHashType                                                                        | 1
|==============================================================================================================================

'Output data'

[width="80%"]
|==============================================================================================================================
| *Description*                                                                   | *Length*
| Signed hash, as ASN-1 encoded R & S components. Mask first byte with 0xFE       | var
| SigHashType                                                                     | 1
|==============================================================================================================================

